# MEMORY DEFINITION
# model both the memory of the CPU and the output file
# memory areas may overlap, or may only be useful to code (RAM areas) or output (INES header)
# order determines how the output file is built
# "define" can be used to find first unused address in a memory area
MEMORY {
    # INES header "start" doesn't matter as no code will reference it
    HEADER:     start =    $0, size =   $10, type = ro, file = %O;

    # CPU space (nes)
    ZEROPAGE:   start = $0000, size =  $100, type = rw, file = "";
    
    # small bit of RAM from $100 to $200
    SMALLRAM:   start = $0100, size =  $100, type = rw, file = "";
    # OAM DMA wants to start at a multiple of $200, splitting "SMALLRAM" and "RAM"
    OAM:        start = $0200, size =  $100, type = rw, file = "";
    RAM:        start = $0300, size =  $400, type = rw, file = "";
    # RAMMIR:   start = $0800, size = $1800, type = rw, file = "";

    PPU:        start = $2000, size =    $8, type = rw, file = "";
    # PPUMIR:   start = $2008, size = $1FF8, type = rw, file = "";

    CPU:        start = $4000, size =   $18, type = rw, file = "";

    # CPU space (cartridge)
    # UNUSED:   start = $4020, size = $1FE8, type = rw, file = "";
    # PRGRAM:   start = $6000, size = $2000, type = rw, file = "";

    # MMC3 layout: (make sure these add up to 16 x "PRG bank count" in symbols)
    PRG_BANK_0: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $11, bank = $00;
    PRG_BANK_1: start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $22, bank = $01;
    DATA_BANK_2: start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $33, bank = $02;
    DATA_BANK_3: start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $44, bank = $03;

    PRG_FIXED:  start = $C000, size = $4000, type = ro, file = %O, fill = yes, fillval = $66;

    # CHR space
    CHR:        start = $0000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF;
}

# SEGMENTS DEFINITION
# model the mapping of code segments to memory areas
SEGMENTS {
    HEADER:     load = HEADER,      type = ro;
    
    ZEROPAGE:   load = ZEROPAGE,    type = rw,  optional = yes;
    SMALLRAM:   load = SMALLRAM,    type = rw,  optional = yes;
    OAM:        load = OAM,         type = rw,  optional = yes;
    
    RAM:        load = RAM,         type = rw,  optional = yes;
    BSS:        load = RAM,         type = rw,  define = yes; # C support

    PPU:        load = PPU,         type = rw,  optional = yes;
    CPU:        load = CPU,         type = rw,  optional = yes;

    
    PRG_BANK_0: load = PRG_BANK_0,  type = ro; # bankable code
    PRG_BANK_1: load = PRG_BANK_1,  type = ro; # bankable code
    DATA_BANK_2: load = DATA_BANK_2,  type = ro; # bankable data
    SAMPLE_BANK_3: load = PRG_FIXED,   type = ro, optional=yes,  define = yes; # non-bankable sample

    PRG_FIXED:  load = PRG_FIXED,   type = ro;
    
    STARTUP_FIRE_1: load = PRG_FIXED,   type = ro;
    STARTUP_MAP:load = PRG_FIXED,  type = ro, optional = yes;
    STARTUP_LIB:load = PRG_FIXED,  type = ro, optional = yes;
    STARTUP_GAME:load = PRG_FIXED,type = ro, optional = yes;
    STARTUP_FIRE_2: load = PRG_FIXED,   type = ro;
    
    NMI_FIRE_1: load = PRG_FIXED,   type = ro;
    NMI_TIMING: load = PRG_FIXED,   type = ro, optional = yes;
    NMI_FIRE_2: load = PRG_FIXED,   type = ro;
    NMI_LIB: load = PRG_FIXED,   type = ro, optional = yes;
    NMI_GAME: load = PRG_FIXED,   type = ro, optional = yes;
    NMI_FIRE_3: load = PRG_FIXED,   type = ro;
    NMI_AUDIO_LIB: load = PRG_FIXED,   type = ro, optional = yes;
    NMI_FIRE_4: load = PRG_FIXED,   type = ro;

    IRQ_FIRE_1: load = PRG_FIXED, type = ro;
    IRQ_LIB: load = PRG_FIXED, type = ro, optional = yes;
    IRQ_GAME: load = PRG_FIXED, type = ro, optional = yes;
    IRQ_FIRE_2: load = PRG_FIXED, type = ro;

    # Bank CODE when possible. only needs to be swapped in during `zerobss` and `copydata`
    CODE:       load = PRG_FIXED,   type = ro,  define = yes; # C support
    
    # used for all c constants
    RODATA:     load = PRG_FIXED,   type = ro,  define = yes; # C support

    # Bank DATA when possible. only needs to be swapped in during `copydata`
    DATA:       load = PRG_FIXED,   type = rw,  define = yes, run = RAM; # C support

    VECTORS:    load = PRG_FIXED,   type = ro,  start = $FFFA;

    CHR:        load = CHR,         type = ro,  optional = yes;
}

SYMBOLS {
    INES_MAPPER:    type = weak, value = 4;   # mmc3
    # INES_MIRROR:    type = weak, value = 0;   # 0 = horizontal mirroring, 1 = vertical mirroring
    INES_SRAM:      type = weak, value = 0;   # 1 = battery backed SRAM at $6000-7FFF
    INES_PRG_BANKS: type = weak, value = 3;   # number of 16kb banks of PRG ROM (for rom size, not mapper banks)
    INES_CHR_BANKS: type = weak, value = 1;   # number of 8kb banks of CHR ROM (for rom size, not mapper banks)
    
    MAPPER_MMC3: type = weak, value = 1;
    
    # C support
    __STACKSIZE__: type = weak, value = $0100;
	__STACK_START__: type = weak, value = $0700;
}